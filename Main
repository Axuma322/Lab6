from eventos import EventManager  # Importa la clase EventManager de eventos.py
from datamanager import RealTimeDataManager  # Importa la clase RealTimeDataManager de datamanager.py
import threading  # Importa el módulo threading para ejecutar procesos en paralelo.
import time  # Importa el módulo time para controlar el flujo del tiempo.

def print_data(data):
    print(f"Datos en tiempo real actualizados: {data}")  # Función callback que imprime los datos actualizados.

if __name__ == "__main__":
    manager = EventManager()  # Crea una instancia de EventManager.
    data_manager = RealTimeDataManager(manager)  # Crea una instancia de RealTimeDataManager.

    manager.subscribe("data_updated", print_data)  # Suscribe la función print_data al evento 'data_updated'.

    update_thread = threading.Thread(target=data_manager.start_real_time_updates)  # Crea un hilo para las actualizaciones de datos.
    update_thread.start()  # Inicia el hilo de actualizaciones.

    try:
        while True:  # Bucle infinito para mantener el programa corriendo.
            time.sleep(1)
    except KeyboardInterrupt:  # Captura la interrupción por teclado para terminar el programa.
        print("\nPrograma terminado.")

Datos en tiempo real actualizados: {'temperatura': 25.135503724540715, 'humedad': 58.72619213938574}
Datos en tiempo real actualizados: {'temperatura': 25.152980007970235, 'humedad': 58.54094853821499}
Datos en tiempo real actualizados: {'temperatura': 25.47714880639016, 'humedad': 58.48333141193844}
Datos en tiempo real actualizados: {'temperatura': 25.06320128795558, 'humedad': 57.34698595121229}
Datos en tiempo real actualizados: {'temperatura': 25.83796669326286, 'humedad': 58.91154070212184}
Datos en tiempo real actualizados: {'temperatura': 25.633820355546508, 'humedad': 57.92364213595421}

